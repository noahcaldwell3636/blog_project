import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly
import plotly.graph_objs as go
import plotly.io as pio
import dash_daq as daq
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output
# MY IMPORTS
from .dash.helper_methods import *
from .dash.style import *


from django_plotly_dash import DjangoDash
app = DjangoDash('SimpleExample')

################################################################################
##########################_CONSTANTS_###########################################
################################################################################


external_stylesheets = [dbc.themes.BOOTSTRAP]

#################################################################################
################################_GET_DATA_#######################################
#################################################################################
observed_data = get_observed_data()
forecast_data = get_forecast_data()
forecast_data = bridge_to_fore(observed_data, forecast_data)
most_recent_clima_data = get_climacell_data()


##################################################################################
##################################_LAYOUT_########################################
##################################################################################

########### CREATE APP ######################
# app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
########### CREATE APP ######################


########### LAYOUT ######################
app.layout = html.Div(
    style={
        'background-color': app_colors['black'],
        'margin': 0,
    },
    children=[

        dcc.Interval(
            id='flood-update-interval',
            interval=60 * 1000,
            n_intervals=0,
        ),

        dcc.Interval(
            id='time-update-interval',
            interval=10 * 1000,
            n_intervals=0,
        ),

        dbc.Row([  # ->>>>>>>>>>>> FIRST ROW WITH GRAPH AND METRICS


                
        ]),  # end of graph and metrics row
    ],
)

##################################################################################################################################
##################################################################################################################################
##################################_CALLBACKS_#####################################################################################
##################################################################################################################################
##################################################################################################################################








############################################################



# # debug kill program method
# @app.callback([Input('debug_kill_program', 'n_clicks')])
# def on_click(n_clicks):
#     if n_clicks != None:
#         exit()

############################################################################################################################################
############################################################################################################################################
#########################################_MAIN_#############################################################################################
############################################################################################################################################
############################################################################################################################################
if __name__ == '__main__':
    app.run_server(debug=True, port=6969)
    print("Local hosting your dashboard")
